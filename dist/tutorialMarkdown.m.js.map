{"version":3,"file":"tutorialMarkdown.m.js","sources":["../src/codeManager.js","../src/editorManager.js","../src/index.js"],"sourcesContent":["import CodeBlock from './codeBlock'\n\nclass CodeManager {\n\n  constructor(options) {\n    this.codeBlocks = []\n    this.blockSelector = options.block\n    this.codeSelector = options.code\n\n    let blockElements = document.querySelectorAll(this.blockSelector)\n    blockElements.forEach(item => console.log(item))\n\n  }\n}\n\nexport default CodeManager\n\n// // (function() {\n\n//   // Editor variables\n//   var frame = document.querySelector('iframe');\n//   var editor;\n\n//   // Code variables\n//   var contentElement = document.querySelector('.content');\n//   var triggers, blocks, structure, sendItButton, fullCodeSets;\n//   var currentStep = -1;\n//   var hasTyped = false;\n\n//   function setup() {\n//     setupCode();\n//   }\n\n//   function setupCode() {\n//     require.config({ paths: { 'vs': '/js/libs/monaco-editor/vs' }});\n//     require(['vs/editor/editor.main'], function() {\n//       editor = monaco.editor.create(document.getElementById('code-area'), {\n//         value: [\n//           '// Welcome to Tutorial Markdown.',\n//           '// start scrolling, and we\\'ll',\n//           '// write the code.'\n//         ].join('\\n'),\n//         lineNumbersMinChars: 3,\n//         scrollBeyondLastLine: false,\n//         language: 'javascript',\n//         fontSize: 10,\n//         minimap: {\n//           enabled: false\n//         },\n//         hover: false,\n//         occurrencesHighlight: false\n//       });\n\n//       editor.onKeyDown(function(e) {\n//         hasTyped = true;\n//       })\n\n//       editor.getModel().updateOptions({ tabSize: 2 })\n\n//       setupTutorial();\n//     });\n\n//     bind();\n//   }\n\n//   function setupTutorial() {\n\n//     sendItButton = document.querySelector('.send-it');\n//     sendItButton.addEventListener('click', sendCode);\n\n//     structure = [];\n//     fullCodeSets = {};\n\n//     saveCode(currentStep)\n\n//     window.addEventListener('scroll', onContentScroll);\n//     trig\n\n//     blocks = document.querySelectorAll('.tmd');\n//     for( var i = 0; i < blocks.length; i++ ) {\n//       var blockElement = blocks[i];\n      \n//       var blockStructure = {\n//         code: blockElement.innerHTML.replace('&gt;', '>').replace('&lt;', '<').replace('&lt;', '<'),\n//         action: blockElement.getAttribute('data-action'),\n//         from: parseInt(blockElement.getAttribute('data-from')),\n//         to: blockElement.getAttribute('data-to'),\n//         lines: blockElement.innerHTML.split('\\n').length\n//       }\n\n//       if( blockStructure.to === 'all' ) {\n//         blockStructure.to = parseInt(blockStructure.from) + blockStructure.code.split('\\n').length\n//       } else {\n//         blockStructure.to = parseInt(blockStructure.to);\n//       }\n\n//       structure.push(blockStructure)\n//     }\n\n//   }\n\n//   function onContentScroll(e) {\n\n//     var hitSteps = -1;\n\n//     for( var i = 0; i < triggers.length; i++) {\n//       var dimensions = triggers[i].getBoundingClientRect();\n//       var headerHeight = 65; // todo, not put here.\n\n//       if( dimensions.y + dimensions.height/3 < ((window.innerHeight - headerHeight) / 2 + headerHeight)) {\n        \n//         if( i === currentStep + 1 ) {\n//           currentStep = i;\n//           onCodeAdd(i);\n//         }\n\n//         hitSteps = i;\n//       }\n//     }\n\n//     if( hitSteps === currentStep - 1) {\n//       currentStep = currentStep - 1;\n//       onCodeRemove(currentStep + 1);\n//       sendCode(currentStep);\n//     }\n//   }\n\n//   function onCodeRemove(step) {\n//     var range = new monaco.Range(0, 1, 999, 1);\n//     var id = { major: 1, minor: 1 };           \n//     var op = {identifier: id, range: range, text: fullCodeSets[step - 1], forceMoveMarkers: true};\n//     editor.executeEdits(fullCodeSets[step - 1], [op]);\n//     hasTyped = false;\n//   }\n\n//   function onCodeAdd(step) {\n\n//     if( hasTyped === true ) {\n//       onCodeRemove(step);\n//     }\n\n//     // Positioning the instructions\n//     var instructions = structure[step];\n\n//     var range = new monaco.Range(instructions.from, 1, instructions.to, 1);\n//     var id = { major: 1, minor: 1 };           \n//     var op = {identifier: id, range: range, text: instructions.code, forceMoveMarkers: true};\n//     editor.executeEdits(instructions.code, [op]);\n\n//     editor.revealLines(instructions.from, instructions.from + instructions.lines);\n//     sendCode();\n//     saveCode(step);\n//   }\n\n//   function onCodeReverse(step) {\n//     console.log(\"remove!\");\n//   }\n\n//   function sendCode() {\n//     var value = editor.getValue()\n    \n//     frame.contentWindow.postMessage(value, \"*\")\n//   }\n\n//   function saveCode(step) {\n\n//     // Only save these ones per each step.\n//     if( !fullCodeSets[step] ) {\n//       fullCodeSets[step] = editor.getValue();\n//     }\n\n//   }\n\n//   function bind() {}\n\n//   setup();\n\n// // })();","\nclass EditorManager {\n\n  constructor(options) {\n    this.hasTyped = false\n    this.setupEditor(options.editorElement)\n  }\n\n  setupEditor( /*editorElement*/ ) {\n    \n    // self.MonacoEnvironment = {\n    //   getWorkerUrl: function (moduleId, label) {\n    //     return './editor.worker.bundle.js';\n    //   }\n    // }\n\n    // this.editor = monaco.editor.create(editorElement, {\n    //   value: [\n    //     '// Welcome to Tutorial Markdown.',\n    //     '// start scrolling, and we\\'ll',\n    //     '// write the code.'\n    //   ].join('\\n'),\n    //   lineNumbersMinChars: 3,\n    //   scrollBeyondLastLine: false,\n    //   language: 'javascript',\n    //   fontSize: 10,\n    //   minimap: { enabled: false },\n    //   hover: false,\n    //   occurrencesHighlight: false\n    // });\n\n    // this.editor.onKeyDown(function(e) {\n    //   this.hasTyped = true;\n    // }.bind(this))\n\n    // this.editor.getModel().updateOptions({ tabSize: 2 })\n  }\n}\n\n\nexport default EditorManager\n\n// // (function() {\n\n//   // Editor variables\n//   var frame = document.querySelector('iframe');\n//   var editor;\n\n//   // Code variables\n//   var contentElement = document.querySelector('.content');\n//   var triggers, blocks, structure, sendItButton, fullCodeSets;\n//   var currentStep = -1;\n//   var hasTyped = false;\n\n//   function setup() {\n//     setupCode();\n//   }\n\n//   function setupCode() {\n//     require.config({ paths: { 'vs': '/js/libs/monaco-editor/vs' }});\n//     require(['vs/editor/editor.main'], function() {\n//       editor = monaco.editor.create(document.getElementById('code-area'), {\n//         value: [\n//           '// Welcome to Tutorial Markdown.',\n//           '// start scrolling, and we\\'ll',\n//           '// write the code.'\n//         ].join('\\n'),\n//         lineNumbersMinChars: 3,\n//         scrollBeyondLastLine: false,\n//         language: 'javascript',\n//         fontSize: 10,\n//         minimap: {\n//           enabled: false\n//         },\n//         hover: false,\n//         occurrencesHighlight: false\n//       });\n\n//       editor.onKeyDown(function(e) {\n//         hasTyped = true;\n//       })\n\n//       editor.getModel().updateOptions({ tabSize: 2 })\n\n//       setupTutorial();\n//     });\n\n//     bind();\n//   }\n\n//   function setupTutorial() {\n\n//     sendItButton = document.querySelector('.send-it');\n//     sendItButton.addEventListener('click', sendCode);\n\n//     structure = [];\n//     fullCodeSets = {};\n\n//     saveCode(currentStep)\n\n//     window.addEventListener('scroll', onContentScroll);\n//     triggers = document.querySelectorAll('.tmd-trigger');\n//     blocks = document.querySelectorAll('.tmd');\n//     for( var i = 0; i < blocks.length; i++ ) {\n//       var blockElement = blocks[i];\n      \n//       var blockStructure = {\n//         code: blockElement.innerHTML.replace('&gt;', '>').replace('&lt;', '<').replace('&lt;', '<'),\n//         action: blockElement.getAttribute('data-action'),\n//         from: parseInt(blockElement.getAttribute('data-from')),\n//         to: blockElement.getAttribute('data-to'),\n//         lines: blockElement.innerHTML.split('\\n').length\n//       }\n\n//       if( blockStructure.to === 'all' ) {\n//         blockStructure.to = parseInt(blockStructure.from) + blockStructure.code.split('\\n').length\n//       } else {\n//         blockStructure.to = parseInt(blockStructure.to);\n//       }\n\n//       structure.push(blockStructure)\n//     }\n\n//   }\n\n//   function onContentScroll(e) {\n\n//     var hitSteps = -1;\n\n//     for( var i = 0; i < triggers.length; i++) {\n//       var dimensions = triggers[i].getBoundingClientRect();\n//       var headerHeight = 65; // todo, not put here.\n\n//       if( dimensions.y + dimensions.height/3 < ((window.innerHeight - headerHeight) / 2 + headerHeight)) {\n        \n//         if( i === currentStep + 1 ) {\n//           currentStep = i;\n//           onCodeAdd(i);\n//         }\n\n//         hitSteps = i;\n//       }\n//     }\n\n//     if( hitSteps === currentStep - 1) {\n//       currentStep = currentStep - 1;\n//       onCodeRemove(currentStep + 1);\n//       sendCode(currentStep);\n//     }\n//   }\n\n//   function onCodeRemove(step) {\n//     var range = new monaco.Range(0, 1, 999, 1);\n//     var id = { major: 1, minor: 1 };           \n//     var op = {identifier: id, range: range, text: fullCodeSets[step - 1], forceMoveMarkers: true};\n//     editor.executeEdits(fullCodeSets[step - 1], [op]);\n//     hasTyped = false;\n//   }\n\n//   function onCodeAdd(step) {\n\n//     if( hasTyped === true ) {\n//       onCodeRemove(step);\n//     }\n\n//     // Positioning the instructions\n//     var instructions = structure[step];\n\n//     var range = new monaco.Range(instructions.from, 1, instructions.to, 1);\n//     var id = { major: 1, minor: 1 };           \n//     var op = {identifier: id, range: range, text: instructions.code, forceMoveMarkers: true};\n//     editor.executeEdits(instructions.code, [op]);\n\n//     editor.revealLines(instructions.from, instructions.from + instructions.lines);\n//     sendCode();\n//     saveCode(step);\n//   }\n\n//   function onCodeReverse(step) {\n//     console.log(\"remove!\");\n//   }\n\n//   function sendCode() {\n//     var value = editor.getValue()\n    \n//     frame.contentWindow.postMessage(value, \"*\")\n//   }\n\n//   function saveCode(step) {\n\n//     // Only save these ones per each step.\n//     if( !fullCodeSets[step] ) {\n//       fullCodeSets[step] = editor.getValue();\n//     }\n\n//   }\n\n//   function bind() {}\n\n//   setup();\n\n// // })();\n","import CodeManager from './codeManager'\nimport EditorManager from './editorManager'\n\nclass TutorialMarkdown {\n\n  constructor(options) {\n\n    this.currentStep = 0\n\n    // Options\n    let fakeOptions = {\n      editor: options.editor, //{monaco editor, created and on the document}\n      markdownSelector: {\n        block: '.tmd', // Selector for code blocks in the tutorial\n        code: '.code' // Selector for the code WITHIN the block\n      },\n      triggerPosition: 0.5, // position on screen for code to trigger.\n      iframe: options.executionWindow,\n    }\n\n    this.scheduled = false\n\n    // this.editorManager = new EditorManager(options);\n    // -- Used to send code to the editor\n    // -- Used to erase code from the editor\n\n    this.codeManager = new CodeManager(fakeOptions.markdownSelector)\n    this.editorManager = new EditorManager(fakeOptions)\n\n    this.throttleScroll = this.throttleScroll.bind(this)\n    this.create()\n  }\n\n  throttleScroll() {\n    if (!this.scheduled) {\n      this.scheduled = true\n      window.requestAnimationFrame(() => {\n        this.scheduled = false\n        this.onScroll()\n      })\n    }\n  }\n\n  onScroll(){\n    // let currentStep = 0\n\n    \n  }\n\n  create() {\n    window.addEventListener('scroll', this.throttleScroll)\n  }\n\n  destroy() {\n    window.removeEventListener('scroll', this.throttleScroll)\n  }\n}\n\nexport default TutorialMarkdown\n\n\n// // (function() {\n\n//   // Editor variables\n//   var frame = document.querySelector('iframe');\n//   var editor;\n\n//   // Code variables\n//   var contentElement = document.querySelector('.content');\n//   var triggers, blocks, structure, sendItButton, fullCodeSets;\n//   var currentStep = -1;\n//   var hasTyped = false;\n\n//   function setup() {\n//     setupCode();\n//   }\n\n//   function setupCode() {\n//     require.config({ paths: { 'vs': '/js/libs/monaco-editor/vs' }});\n//     require(['vs/editor/editor.main'], function() {\n//       editor = monaco.editor.create(document.getElementById('code-area'), {\n//         value: [\n//           '// Welcome to Tutorial Markdown.',\n//           '// start scrolling, and we\\'ll',\n//           '// write the code.'\n//         ].join('\\n'),\n//         lineNumbersMinChars: 3,\n//         scrollBeyondLastLine: false,\n//         language: 'javascript',\n//         fontSize: 10,\n//         minimap: {\n//           enabled: false\n//         },\n//         hover: false,\n//         occurrencesHighlight: false\n//       });\n\n//       editor.onKeyDown(function(e) {\n//         hasTyped = true;\n//       })\n\n//       editor.getModel().updateOptions({ tabSize: 2 })\n\n//       setupTutorial();\n//     });\n\n//     bind();\n//   }\n\n//   function setupTutorial() {\n\n//     sendItButton = document.querySelector('.send-it');\n//     sendItButton.addEventListener('click', sendCode);\n\n//     structure = [];\n//     fullCodeSets = {};\n\n//     saveCode(currentStep)\n\n//     window.addEventListener('scroll', onContentScroll);\n//     triggers = document.querySelectorAll('.tmd-trigger');\n//     blocks = document.querySelectorAll('.tmd');\n//     for( var i = 0; i < blocks.length; i++ ) {\n//       var blockElement = blocks[i];\n      \n//       var blockStructure = {\n//         code: blockElement.innerHTML.replace('&gt;', '>').replace('&lt;', '<').replace('&lt;', '<'),\n//         action: blockElement.getAttribute('data-action'),\n//         from: parseInt(blockElement.getAttribute('data-from')),\n//         to: blockElement.getAttribute('data-to'),\n//         lines: blockElement.innerHTML.split('\\n').length\n//       }\n\n//       if( blockStructure.to === 'all' ) {\n//         blockStructure.to = parseInt(blockStructure.from) + blockStructure.code.split('\\n').length\n//       } else {\n//         blockStructure.to = parseInt(blockStructure.to);\n//       }\n\n//       structure.push(blockStructure)\n//     }\n\n//   }\n\n//   function onContentScroll(e) {\n\n//     var hitSteps = -1;\n\n//     for( var i = 0; i < triggers.length; i++) {\n//       var dimensions = triggers[i].getBoundingClientRect();\n//       var headerHeight = 65; // todo, not put here.\n\n//       if( dimensions.y + dimensions.height/3 < ((window.innerHeight - headerHeight) / 2 + headerHeight)) {\n        \n//         if( i === currentStep + 1 ) {\n//           currentStep = i;\n//           onCodeAdd(i);\n//         }\n\n//         hitSteps = i;\n//       }\n//     }\n\n//     if( hitSteps === currentStep - 1) {\n//       currentStep = currentStep - 1;\n//       onCodeRemove(currentStep + 1);\n//       sendCode(currentStep);\n//     }\n//   }\n\n//   function onCodeRemove(step) {\n//     var range = new monaco.Range(0, 1, 999, 1);\n//     var id = { major: 1, minor: 1 };           \n//     var op = {identifier: id, range: range, text: fullCodeSets[step - 1], forceMoveMarkers: true};\n//     editor.executeEdits(fullCodeSets[step - 1], [op]);\n//     hasTyped = false;\n//   }\n\n//   function onCodeAdd(step) {\n\n//     if( hasTyped === true ) {\n//       onCodeRemove(step);\n//     }\n\n//     // Positioning the instructions\n//     var instructions = structure[step];\n\n//     var range = new monaco.Range(instructions.from, 1, instructions.to, 1);\n//     var id = { major: 1, minor: 1 };           \n//     var op = {identifier: id, range: range, text: instructions.code, forceMoveMarkers: true};\n//     editor.executeEdits(instructions.code, [op]);\n\n//     editor.revealLines(instructions.from, instructions.from + instructions.lines);\n//     sendCode();\n//     saveCode(step);\n//   }\n\n//   function onCodeReverse(step) {\n//     console.log(\"remove!\");\n//   }\n\n//   function sendCode() {\n//     var value = editor.getValue()\n    \n//     frame.contentWindow.postMessage(value, \"*\")\n//   }\n\n//   function saveCode(step) {\n\n//     // Only save these ones per each step.\n//     if( !fullCodeSets[step] ) {\n//       fullCodeSets[step] = editor.getValue();\n//     }\n\n//   }\n\n//   function bind() {}\n\n//   setup();\n\n// // })();\n"],"names":["CodeManager","options","codeBlocks","blockSelector","block","codeSelector","code","blockElements","document","querySelectorAll","forEach","console","log","item","EditorManager","hasTyped","setupEditor","editorElement","TutorialMarkdown","currentStep","fakeOptions","editor","executionWindow","scheduled","codeManager","markdownSelector","editorManager","throttleScroll","bind","create","requestAnimationFrame","onScroll","addEventListener","removeEventListener"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;IAEMA,cAEJ,qBAAYC,OAAZ,EAAqB;;;OACdC,UAAL,GAAkB,EAAlB;OACKC,aAAL,GAAqBF,QAAQG,KAA7B;OACKC,YAAL,GAAoBJ,QAAQK,IAA5B;;MAEIC,gBAAgBC,SAASC,gBAAT,CAA0B,KAAKN,aAA/B,CAApB;gBACcO,OAAd,CAAsB;WAAQC,QAAQC,GAAR,CAAYC,IAAZ,CAAR;GAAtB;;;ICTEC;yBAEQb,OAAZ,EAAqB;;;SACdc,QAAL,GAAgB,KAAhB;SACKC,WAAL,CAAiBf,QAAQgB,aAAzB;;;;;mDAG+B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ICL7BC;4BAEQjB,OAAZ,EAAqB;;;;SAEdkB,WAAL,GAAmB,CAAnB;;;QAGIC,cAAc;cACRnB,QAAQoB,MADA;wBAEE;eACT,MADS;cAEV,OAFU;OAFF;uBAMC,GAND;cAORpB,QAAQqB;KAPlB;;SAUKC,SAAL,GAAiB,KAAjB;;;;;;SAMKC,WAAL,GAAmB,IAAIxB,WAAJ,CAAgBoB,YAAYK,gBAA5B,CAAnB;SACKC,aAAL,GAAqB,IAAIZ,aAAJ,CAAkBM,WAAlB,CAArB;;SAEKO,cAAL,GAAsB,KAAKA,cAAL,CAAoBC,IAApB,CAAyB,IAAzB,CAAtB;SACKC,MAAL;;;;;qCAGe;;;UACX,CAAC,KAAKN,SAAV,EAAqB;aACdA,SAAL,GAAiB,IAAjB;eACOO,qBAAP,CAA6B,YAAM;gBAC5BP,SAAL,GAAiB,KAAjB;gBACKQ,QAAL;SAFF;;;;;+BAOM;;;;;;;6BAMD;aACAC,gBAAP,CAAwB,QAAxB,EAAkC,KAAKL,cAAvC;;;;8BAGQ;aACDM,mBAAP,CAA2B,QAA3B,EAAqC,KAAKN,cAA1C;;;;;;;;"}